using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace FluentIconGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            // Define the path to the Fluent UI System icon pack
            string dir = (args.Length >= 1) ? args[0]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "fluentui-system-icons", "assets");
            string outputProj = (args.Length >= 2) ? args[1]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "FluentSystemIcons", "Fluent.Icons");

            Regex svgReg = new Regex(@"ic_fluent_(?<name>\w+)_(?<size>10|12|16|20|24|28|32|48)_(?<type>regular|filled|light|color)(_(?<direction>ltr|rtl))?.svg", RegexOptions.Compiled);

            // Track all generated symbols and resource keys
            HashSet<string> symbols = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            HashSet<string> keys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            // Reuse one XmlDocument and XmlNamespaceManager for all files
            var svg = new XmlDocument();
            XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(svg.NameTable);
            xmlnsManager.AddNamespace("svg", "http://www.w3.org/2000/svg");

            // Reuse one StringBuilder for all path data
            StringBuilder xamlPathData = new StringBuilder();

            int count = 0;

            using (StreamWriter symbolWriter = File.CreateText(Path.Combine(outputProj, "FluentSymbol.g.cs")))
            using (StreamWriter resourceWriter = File.CreateText(Path.Combine(outputProj, "FluentSymbolIcon.resw")))
            {
                symbolWriter.Write(
@"// DO NOT edit this file! Changes will be overridden whenever the
// FluentIconGenerator is run.

namespace Fluent.Icons
{
    /// <summary>
    /// An enum listing all available Fluent System Icon symbols.
    /// </summary>
    public enum FluentSymbol
    {
");
                resourceWriter.Write(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
	<resheader name=""resmimetype"">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name=""version"">
		<value>1.3</value>
	</resheader>
	<resheader name=""reader"">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name=""writer"">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
");

                foreach (string folder in Directory.EnumerateDirectories(dir, @"*", SearchOption.TopDirectoryOnly))
                {
                    foreach (string file in Directory.EnumerateFiles(Path.Combine(folder, "SVG"), @"*", SearchOption.AllDirectories))
                    {
                        string filename = Path.GetFileName(file);

                        Match match = svgReg.Match(file);
                        if (!match.Success)
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine($"Unknown {filename}");
                            continue;
                        }

                        string symbol = string.Join("", 
                            match.Groups["name"].Value
                            .Split('_')
                            .Select(part => char.ToUpper(part[0]) + part.Substring(1)));
                        var direction = match.Groups["direction"].Value;
                        if (!string.IsNullOrEmpty(direction))
                        {
                            symbol += direction.ToUpperInvariant();
                        }
                        string size = match.Groups["size"].Value;
                        string type = match.Groups["type"].Value;
                        string key = $"{symbol}/{size}-{type}";

                        if (string.Equals(type, "color", StringComparison.OrdinalIgnoreCase))
                        {
                            // Ignore colored icons
                            continue;
                        }

                        if (keys.Contains(key))
                        {
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            Console.WriteLine($"Duplicate {filename}");
                            continue;
                        }
                        keys.Add(key);

                        // Convert svg into a path string
                        svg.Load(file);
                        XmlNodeList list = svg.LastChild.SelectNodes("//svg:path", xmlnsManager);

                        xamlPathData.Clear();
                        foreach (XmlNode pathElem in list)
                        {
                            // Appending SVG paths effectively combines them into one
                            xamlPathData.Append(pathElem.Attributes["d"].Value).Append(' ');
                        }

                        if (!symbols.Contains(symbol))
                        {
                            symbolWriter.WriteLine($"        {symbol},");
                            symbols.Add(symbol);
                        }

                        resourceWriter.WriteLine($"    <data name=\"{key}\"><value>{xamlPathData}</value></data>");

                        count++;
                    }
                }

                symbolWriter.WriteLine(
@"    }
}");

                resourceWriter.WriteLine(
@"</root>");
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"\r\nGenerated {count} variants of {symbols.Count} symbols");
            Console.ResetColor();
        }
    }
}
