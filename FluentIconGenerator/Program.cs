using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml;
using System.Text;
using System.Collections.Generic;

namespace FluentIconGenerator
{
    class Program
    {
        static void Main(string[] args)
        {
            // Define the path to the Fluent UI System icon pack
            
            string dir = (args.Length >= 1) ? args[0]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "fluentui-system-icons", "assets");
            string outputProj = (args.Length >= 2) ? args[1]
                : Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile),
                  "source", "repos", "FluentSystemIcons", "Fluent.Icons");
            Regex svgReg = new Regex(@"ic_fluent_(?<name>\w+)_(?<size>\d+)_(?<type>regular|filled).svg", RegexOptions.Compiled);


            using (StreamWriter sourceWriter = File.CreateText(Path.Combine(outputProj, "FluentSymbolIcon.g.cs")))
            using (StreamWriter resourceWriter = File.CreateText(Path.Combine(outputProj, "FluentSymbolIcon.resw")))
            {
                sourceWriter.Write(
@"using System.Collections.Generic;

namespace Fluent.Icons
{

    // DO NOT edit this file! Changes will be overridden whenever the
    // FluentIconGenerator is run.

    /// <summary>
    /// An enum listing all available Fluent System Icon symbols
    /// </summary>
    public enum FluentSymbol 
    {
");
                resourceWriter.Write(
@"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
	<resheader name=""resmimetype"">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name=""version"">
		<value>1.3</value>
	</resheader>
	<resheader name=""reader"">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name=""writer"">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
");

                var allNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                int i = 0;

                var svg = new XmlDocument();
                // Create namespace manager
                XmlNamespaceManager xmlnsManager = new XmlNamespaceManager(svg.NameTable);
                xmlnsManager.AddNamespace("svg", "http://www.w3.org/2000/svg");

                StringBuilder xamlPathData = new StringBuilder();

                foreach (string folder in Directory.EnumerateDirectories(dir, @"*", SearchOption.TopDirectoryOnly))
                {
                    var SVGFolder = Path.Combine(folder, "SVG");
                    foreach (string path in Directory.EnumerateFiles(SVGFolder, @"*", SearchOption.AllDirectories))
                    {
                        var match = svgReg.Match(path);
                        if (!match.Success)
                            continue;

                        // Extrapolate the symbol name from the file path
                        string file = path.Substring(dir.Length + 1); // Also remove the slash
                        Console.Write(file);
                        string type = match.Groups["type"].Value;
                        type = type == "regular" ? "" : char.ToUpperInvariant(type[0]) + type.Substring(1);
                        string name = file.Split('\\')[0].Replace(" ", "") + match.Groups["size"].ToString() + type;

                        if (allNames.Contains(name))
                        {
                            Console.Write(" DUPLICATE IGNORED");
                        }
                        else
                        {
                            allNames.Add(name);

                            #region SVG reading
                            // Load the path data into a string
                            svg.Load(path);

                            // Select all SVG path elements
                            XmlNodeList list = svg.LastChild.SelectNodes("//svg:path", xmlnsManager);
                            xamlPathData.Clear();
                            foreach (XmlNode pathElem in list)
                            {
                                // Appending SVG paths effectively combines them into one
                                xamlPathData.Append(pathElem.Attributes["d"].Value).Append(' ');
                            }
                            #endregion

                            // Generate the C# source code
                            // TODO: Switch to .NET source generators
                            sourceWriter.WriteLine($"        {name},");
                            resourceWriter.WriteLine($"    <data name=\"{i++}\"><value>{xamlPathData}</value></data>");
                        }
                        Console.WriteLine();
                    }
                }

                sourceWriter.WriteLine(
@"    }
}");

                resourceWriter.WriteLine(
@"</root>");
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\r\nGeneration complete!");
            Console.ResetColor();
        }
    }
}
